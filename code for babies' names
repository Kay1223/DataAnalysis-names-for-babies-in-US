Use IPython & anaconda
Download datasets here, https://github.com/wesm/pydata-book/tree/master/ch02/names

# In[1]:

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


# In[2]:

names1880 = pd.read_csv('ch02/yob1880.txt', names = ['name', 'sex', 'births'])


# In[3]:

names1880


# In[4]:

names1880.groupby('sex').births.sum()


# In[5]:

years = range(1880, 2011)


# In[6]:

pieces = []
columns = ['name', 'sex', 'births']


# In[7]:

for year in years:
    path = 'ch02/yob%d.txt' % year
    frame = pd.read_csv(path, names=columns)
    frame['year'] = year
    pieces.append(frame)
    names = pd.concat(pieces, ignore_index=True)


# In[8]:

names


# In[9]:

total_births = names.pivot_table(names, index = 'year', columns = 'sex', aggfunc = sum)


# In[10]:

total_births.tail()


# In[11]:

total_births.plot(title='Total births by sex and year')


# In[12]:

def add_prop(group):
    births = group.births.astype(float)
    
    group['prop'] = births / births.sum()
    return group
names = names.groupby(['year', 'sex']).apply(add_prop)


# In[13]:

names


# In[14]:

np.allclose(names.groupby(['year', 'sex']).prop.sum(), 1)


# In[15]:

def get_top1000(group):
    return group.sort_index(by='births', ascending = False)[:1000]
grouped = names.groupby(['year', 'sex'])
top1000 = grouped.apply(get_top1000)


# In[16]:

top1000


# In[17]:

boys = top1000[top1000.sex == 'M']


# In[18]:

girls = top1000[top1000.sex == 'F']


# In[19]:

total_births = top1000.pivot_table('births', index = 'year', columns = 'name', aggfunc = sum)


# In[20]:

total_births


# In[21]:

subset = total_births[['John', 'Harry', 'Mary', 'Marilyn']]


# In[22]:

subset.plot(subplots = True, figsize = (12, 10), grid = False, title = "Number of births per year")


# In[23]:

plt.show()


# In[24]:

table = top1000.pivot_table('prop', index = 'year', columns = 'sex', aggfunc = sum)


# In[25]:

table.plot(title = 'Sum of table1000.prop by year and sex',
                yticks=np.linspace(0, 1.2, 13), xticks=range(1880, 2020, 10))


# In[26]:

df = boys[boys.year == 2010]


# In[27]:

df


# In[28]:

plt.show()


# In[29]:

prop_cumsum = df.sort_index(by='prop', ascending=False).prop.cumsum()


# In[30]:

prop_cumsum.values.searchsorted(0.5)


# In[31]:

df = boys[boys.year == 1900]
in1900 = df.sort_index(by='prop', ascending=False).prop.cumsum()
in1900.values.searchsorted(0.5) + 1


# In[32]:

def get_quantile_count(group, q=0.5):
    group = group.sort_index(by = 'prop', ascending = False)
    return group.prop.cumsum().values.searchsorted(q) +1


# In[33]:

diversity = top1000.groupby(['year', 'sex']).apply(get_quantile_count)
diversity = diversity.unstack('sex')


# In[34]:

diversity.head()


# In[35]:

diversity.plot(title = "Number of popular names in top 50%")


# In[36]:

plt.show()


# In[37]:

get_last_letter = lambda x: x[-1]
last_letters = names.name.map(get_last_letter)
last_letters.name = 'last_letter'


# In[38]:

table = names.pivot_table('births', index=last_letters,
                          columns=['sex', 'year'], aggfunc=sum)


# In[39]:

last_letters.head(10)


# In[40]:

last_letters.tail()


# In[41]:

subtable = table.reindex(columns=[1910, 1960, 2010], level = 'year')


# In[42]:

subtable.head()


# In[43]:

subtable.sum()


# In[44]:

letter_prop = subtable / subtable.sum().astype(float)


# In[45]:

fig, axes = plt.subplots(2,1, figsize=(10,8))
letter_prop['M'].plot(kind='bar', rot=0, ax=axes[0], title='Male')
letter_prop['F'].plot(kind='bar', rot=0, ax=axes[1], title='Female', legend=False)


# In[46]:

plt.show()


# In[47]:

letter_prop = table / table.sum().astype(float)


# In[48]:

dny_ts = letter_prop.ix[['d', 'n', 'y'], 'M'].T


# In[49]:

dny_ts.head()


# In[50]:

dny_ts.plot(style={'d' : '-.', 'n' : '-', 'y': ':'})


# In[51]:

plt.show()


# In[52]:

all_names = top1000.name.unique()


# In[53]:

mask = np.array(['lesl' in x.lower() for x in all_names])


# In[54]:

lesley_like = all_names[mask]


# In[55]:

lesley_like


# In[56]:

filtered = top1000[top1000.name.isin(lesley_like)]


# In[57]:

filtered.groupby('name').births.sum()


# In[58]:

filtered.head(10)


# In[59]:

filtered.tail(10)


# In[60]:

table = filtered.pivot_table('births', index= 'year', columns = 'sex', aggfunc = 'sum')


# In[61]:

table = table.div(table.sum(1), axis=0)


# In[62]:

table.tail()


# In[63]:

table.head(5)


# In[64]:

table.tail(5)


# In[65]:

table.plot(style={'M':'k-', 'F':'k--'})


# In[66]:

plt.show()


