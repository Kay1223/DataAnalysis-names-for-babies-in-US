# IPython with anaconda
# You can download Data here. https://github.com/ipython-books/cookbook-data/blob/master/titanic.zip

# In[1]:

import numpy as np
import pandas as pd
import scipy.stats as st
import os
import sklearn
import sklearn.linear_model as lm
import sklearn.cross_validation as cv
import sklearn.grid_search as gs
import matplotlib.pyplot as plt
%matplotlib inline


# In[3]:

train = pd.read_csv("data/titanic.train.csv")
test = pd.read_csv("data/titanic.test.csv")


# In[4]:

train[train.columns[[2,4,5,1]]].head()


# In[5]:

data = train[['Sex', 'Age', 'Pclass', 'Survived']].copy()
data['Sex'] = data['Sex'] == 'female'
data = data.dropna()


# In[6]:

data_np = data.astype(np.int32).values
X = data_np[:, :-1]
y = data_np[:, -1]


# In[16]:

female = X[:, 0] == 1
survived = y == 1
age = X[:, 1]
bins_ = np.arange(0, 81, 5)
S = {'male' : np.histogram(age[survived & ~female],
                                             bins = bins_)[0],
        'female' : np.histogram(age[survived & female],
                                             bins = bins_)[0]}
D = {'male' : np.histogram(age[~survived & ~female],
                                             bins = bins_)[0],
        'female' : np.histogram(age[~survived & female],
                                             bins = bins_)[0]}


# In[17]:

#plot the data
bins = bins_[ :-1]
for i, sex, color in zip((0,1),
                                      ('male', 'female'),
                                      ('#3345d0', '#cc3dc0')):
    plt.subplot(121 + i)
    plt.bar(bins, S[sex], bottom = D[sex],
             color = color,
             width = 5, label = 'survived')
    plt.bar(bins, D[sex], color='k', width = 5,
             label = 'died')
    plt.xlim(0, 80)
    plt.grid(None)
    plt.title(sex + " survival")
    plt.xlabel("Age (years)")
    plt.legend()


# In[18]:

# split X and y into train and test datasets.
(X_train, X_test, y_train,
y_test) = cv.train_test_split(X, y, test_size = .05)


# In[19]:

# instanciate the classifier
logreg = lm.LogisticRegression()


# In[20]:

logreg.fit(X_train, y_train)
y_predicted = logreg.predict(X_test)


# In[21]:

plt.imshow(np.vstack((y_test, y_predicted)),
                     interpolation = 'none', cmap = 'bone')
plt.xticks([]); plt.yticks([])
plt.title(('Actual and predicted survival '
                'outcomes on the test set'))


# In[22]:

cv.cross_val_score(logreg, X, y)


# In[23]:

grid = gs.GridSearchCV(logreg,
                                  {'C' : np.logspace(-5, 5, 50)})
grid.fit(X_train, y_train)
grid.best_params_


# In[24]:

cv.cross_val_score(grid.best_estimator_, X, y)




